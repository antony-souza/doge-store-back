generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  user
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  password   String
  name       String
  role       Role     @default(user)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@map("user")
}

model Store {
  id                       String                     @id @default(uuid())
  name                     String
  created_at               DateTime                   @default(now())
  updated_at               DateTime                   @default(now())
  category                 Category[]
  product                  Product[]
  ProductAndAddtionalDishe ProductAndAddtionalDishe[]
  store_config             StoreConfig[]

  @@map("store")
}

model StoreConfig {
  id               String   @id @default(uuid())
  name             String
  phone            String
  address          String
  description      String
  is_open          Boolean  @default(true)
  image_url        String
  background_color String
  created_at       DateTime @default(now())
  updated_at       DateTime @default(now())
  store_id         String
  store            Store    @relation(fields: [store_id], references: [id])

  @@map("store_config")
}

model Category {
  id         String    @id @default(uuid())
  enabled    Boolean   @default(true)
  name       String
  image_url  String[]  @default([])
  product    Product[]
  store_id   String
  store      Store     @relation(fields: [store_id], references: [id])
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())

  @@map("category")
}

model Product {
  id                       String                     @id @default(uuid())
  enabled                  Boolean                    @default(true)
  image_url                String[]                   @default([])
  name                     String
  description              String?
  price                    Float
  category_id              String
  store_id                 String
  store                    Store                      @relation(fields: [store_id], references: [id])
  category                 Category                   @relation(fields: [category_id], references: [id])
  created_at               DateTime                   @default(now())
  updated_at               DateTime                   @default(now())
  ProductAndAddtionalDishe ProductAndAddtionalDishe[]

  @@map("product")
}

model AdditionalDishe {
  id                       String                     @id @default(uuid())
  enabled                  Boolean                    @default(true)
  image_url                String[]                   @default([])
  name                     String
  description              String
  price                    Float
  store_id                 String
  created_at               DateTime                   @default(now())
  updated_at               DateTime                   @default(now())
  ProductAndAddtionalDishe ProductAndAddtionalDishe[]

  @@map("additional_dishe")
}

model ProductAndAddtionalDishe {
  id                 String          @id @default(uuid())
  enabled            Boolean         @default(true)
  store_id           String
  product_id         String
  additional_dish_id String
  store              Store           @relation(fields: [store_id], references: [id])
  product            Product         @relation(fields: [product_id], references: [id])
  additional_dish    AdditionalDishe @relation(fields: [additional_dish_id], references: [id])
  created_at         DateTime        @default(now())
  updated_at         DateTime        @default(now())

  @@map("product_additional_dishe")
}
